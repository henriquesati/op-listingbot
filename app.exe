var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
System.register("utils/epoch", [], function (exports_1, context_1) {
    "use strict";
    var getEpochTimestamp;
    var __moduleName = context_1 && context_1.id;
    return {
        setters: [],
        execute: function () {
            exports_1("getEpochTimestamp", getEpochTimestamp = () => {
                // use a timestamp if it is given, else use the current time
                let date = new Date();
                return Math.floor(date.getTime() / 1000);
            });
        }
    };
});
System.register("utils/webhook", [], function (exports_2, context_2) {
    "use strict";
    var __moduleName = context_2 && context_2.id;
    function webhook(asset_listed) {
        return __awaiter(this, void 0, void 0, function* () {
            const send_object = {
                name: "Captain Hook",
                content: asset_listed
            };
            const options = {
                method: 'POST',
                headers: {
                    'content-type': 'application/json'
                },
                body: JSON.stringify(send_object)
            };
            try {
                let urlhook = 'https://discord.com/api/webhooks/1199815432832561202/Zchj1tTHPXPtVHZjCc92F6m30qY-9K5QXQtKe9WmQ5i6b_fP4Q19BCx7x3HUwR0r1_UB';
                const responde = fetch(urlhook, options)
                    .then((r) => r)
                    .then((r) => (r));
            }
            catch (error) {
                console.log(error);
            }
        });
    }
    exports_2("webhook", webhook);
    return {
        setters: [],
        execute: function () {
        }
    };
});
System.register("app", ["utils/epoch", "utils/webhook"], function (exports_3, context_3) {
    "use strict";
    var epoch_1, webhook_1, ethoriginslug, avaxslug, ethslug;
    var __moduleName = context_3 && context_3.id;
    function get_listings(ocurredAfter, slug) {
        return __awaiter(this, void 0, void 0, function* () {
            const options = {
                method: 'GET',
                headers: {
                    Accept: 'application/json',
                    'X-API-KEY': "989c7a7ba64947f2934b1538921948c1"
                }
            };
            try {
                let url = `https://api.opensea.io/api/v1/events?collection_slug=${slug}&event_type=created&occurred_after=${ocurredAfter}`;
                const response = yield fetch(url, options)
                    .then((r) => r.json())
                    .then((r) => response_handler(r.asset_events, slug));
            }
            catch (e) {
                console.log(e);
            }
        });
    }
    function response_handler(array_input, slug) {
        if (array_input.length == 0) {
            console.log("nada encontrado em" + slug);
            return;
        }
        array_input.map((x) => {
            const asset = x.asset.name;
            webhook_1.webhook(`NFT ${x.asset.name} on ${slug}`);
            console.log(x.asset.name);
        });
    }
    function monitor() {
        return __awaiter(this, void 0, void 0, function* () {
            setInterval(() => __awaiter(this, void 0, void 0, function* () {
                const timestamp = epoch_1.getEpochTimestamp() - 5;
                yield get_listings(timestamp, ethoriginslug);
                yield get_listings(timestamp, ethslug);
                yield get_listings(timestamp, avaxslug);
            }), 5000);
        });
    }
    return {
        setters: [
            function (epoch_1_1) {
                epoch_1 = epoch_1_1;
            },
            function (webhook_1_1) {
                webhook_1 = webhook_1_1;
            }
        ],
        execute: function () {
            ethoriginslug = 'rtlol';
            avaxslug = 'rtlol-evolved-avax';
            ethslug = 'rtlol-evolved-eth';
            monitor();
        }
    };
});
